{"version":3,"sources":["components/Plant.js","components/ColorListReduced.js","components/PlantTile.js","App.js","serviceWorker.js","index.js"],"names":["Plant1","react_default","a","createElement","className","concat","this","props","level","Component","Plant2","Plant3","Plant4","Plant5","Plant6","Plant","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","plant","plantExist","randomPlant","bind","assertThisInitialized","random","Math","round","setState","stage","Plant_Plant1","Plant_Plant2","Plant_Plant3","Plant_Plant4","Plant_Plant5","Plant_Plant6","ColorListReduced","color","PlantTile","image","countUp","randomColor","max","colorList","length","mode","_this2","_this$state","plantTileStyle","opacity","plantTileColor","background","style","onMouseEnter","onClick","components_Plant","App","count","tileArray","Array","fill","map","tile","components_PlantTile","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b8d365f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport '../css/Plant.css';\n\n\nclass Plant1 extends Component {\n    render() {\n        return(\n            <div className=\"plant1\">\n                <div className={`plant stage-${this.props.level}`}>\n                    <div className=\"stem\"/>\n                    <div className=\"leaf leaf1\"/>\n                    <div className=\"leaf leaf2\"/>\n                    <div className=\"flower\">\n                        <div className=\"petal1\"/>\n                        <div className=\"petal2\"/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Plant2 extends Component {\n    render() {\n        return(\n            <div className=\"plant2\">\n                <div className={`plant stage-${this.props.level}`}>\n                    <div className=\"stem\"/>\n                    <div className=\"leaf leaf1\"/>\n                    <div className=\"leaf leaf2\"/>\n                    <div className=\"flower\">\n                        <div className=\"petal1\"/>\n                        <div className=\"petal2\"/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Plant3 extends Component {\n    render() {\n        return(\n            <div className=\"plant3\">\n                <div className={`plant stage-${this.props.level}`}>\n                    <div className=\"stem\"/>\n                    <div className=\"leaf left-leaf\">\n                        <div className=\"stripe\"/>\n                        <div className=\"stripe\"/>\n                        <div className=\"stripe\"/>\n                    </div>\n                    <div className=\"leaf right-leaf\">\n                        <div className=\"stripe\"/>\n                        <div className=\"stripe\"/>\n                        <div className=\"stripe\"/>\n                    </div>\n                    <div className=\"flower\">\n                        <div className=\"notch\"/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Plant4 extends Component {\n    render() {\n        return(\n            <div className=\"plant4\">\n                <div className={`plant stage-${this.props.level}`}>\n                    <div className=\"flower flower1\"/>\n                    <div className=\"flower flower2\"/>\n                    <div className=\"flower flower3\"/>\n                    <div className=\"stem stem1\"/>\n                    <div className=\"stem stem2\"/>\n                    <div className=\"stem stem3\"/>\n                    <div className=\"stem stem4\"/>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Plant5 extends Component {\n    render() {\n        return(\n            <div className=\"plant5\">\n                <div className={`plant stage-${this.props.level}`}>\n                    <div className=\"stem\"/>\n                    <div className=\"leaf left-leaf\">\n                        <div className=\"stripe\"/>\n                        <div className=\"stripe\"/>\n                        <div className=\"stripe\"/>\n                    </div>\n                    <div className=\"leaf right-leaf\">\n                        <div className=\"stripe\"/>\n                        <div className=\"stripe\"/>\n                        <div className=\"stripe\"/>\n                    </div>\n                    <div className=\"flower\">\n                        <div className=\"petal5\"/>\n                        <div className=\"inner-petal petal3\"/>\n                        <div className=\"inner-petal petal4\"/>\n                        <div className=\"petal petal1\"/>\n                        <div className=\"petal petal2\"/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Plant6 extends Component {\n    render() {\n        return(\n            <div className=\"plant6\">\n                <div className={`plant stage-${this.props.level}`}>\n                    <div className=\"flower\"/>\n                    <div className=\"leaf leaf1\"/>\n                    <div className=\"leaf leaf2\"/>\n                    <div className=\"leaf leaf3\">\n                        <div className=\"inner-leaf leaf1\"/>\n                        <div className=\"inner-leaf leaf2\"/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Plant extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            plant: 0,\n            plantExist: false\n        }\n\n        this.randomPlant = this.randomPlant.bind(this);\n    }\n\n    componentDidMount() {\n        this.randomPlant();\n    }\n\n    randomPlant() {\n        const min=0;\n        const max=5;\n        const random = Math.round(Math.random() * (+max - +min) + +min);\n\n        this.setState({ plant: random, plantExist: true });\n    }\n\n    plant() {\n        let {plant} = this.state;\n        let {stage} = this.props;\n\n        var level = 0;\n        if (stage === 2) {\n            // seed\n            level = 1;\n        } else if (stage === 3) {\n            // bud\n            level = 2;\n        } else if (stage === 4) {\n            // medium\n            level = 3;\n        } else if (stage >= 5) {\n            // full grown\n            level = 4;\n        }\n\n        if (plant === 0) {\n            return <Plant1 level={level}/>\n        } else if (plant === 1) {\n            return <Plant2 level={level}/>\n        } else if (plant === 2) {\n            return <Plant3 level={level}/>\n        } else if (plant === 3) {\n            return <Plant4 level={level}/>\n        } else if (plant === 4) {\n            return <Plant5 level={level}/>\n        } else if (plant === 5) {\n            return <Plant6 level={level}/>\n        }\n    }\n\n    render() {\n        return(\n            <div className=\"plant-container\">\n                {this.state.plantExist ? this.plant() : \"\"}\n            </div>\n        );\n    }\n}\n\nexport default Plant;\n","var ColorListReduced = [\n    {\n        color: \"#D8B8C4\",\n    },\n    {\n        color: \"#EAC9D0\",\n    },\n    {\n        color: \"#E3C9C9\",\n    },\n    {\n        color: \"#DBBCBC\",\n    },\n    {\n        color: \"#D9C3CB\",\n    },\n    {\n        color: \"#D5C2C9\",\n    },\n    {\n        color: \"#E3D1D7\",\n    },\n    {\n        color: \"#CAB3BC\",\n    }\n];\n\nexport default ColorListReduced\n","import React, { Component } from 'react';\nimport Plant from './Plant.js';\n\nimport colorList from './ColorListReduced.js';\n\nclass PlantTile extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            stage: 0,\n            color: \"black\",\n            image: \"\"\n        };\n    }\n\n    random() {\n        if (this.state.stage === 4) {\n            this.props.countUp();\n        }\n        if (this.state.color === \"black\") {\n            this.randomColor();\n        }\n        this.setState({\n            stage: this.state.stage + 1\n        })\n    }\n\n    randomColor() {\n        const min=0;\n        const max=colorList.length - 1;\n        const random = Math.round(Math.random() * (+max - +min) + +min);\n        let color = colorList[random].color;\n\n        this.setState({\n            color: color,\n            mode: \"solid\"\n        });\n    }\n\n    render() {\n        let {color, stage} = this.state;\n\n        const plantTileStyle = {\n            opacity: stage === 0 ? 0 : 1\n        }\n\n        const plantTileColor = {\n            background: color\n        }\n\n        return (\n            <div className=\"image-card\"\n                style={plantTileStyle}\n                onMouseEnter={() => this.random()}\n                onClick={() => this.random()}>\n\n                <div className=\"box front\"/>\n                <div className=\"box right\"/>\n                <div className=\"box top\"\n                    style={plantTileColor}/>\n\n                {stage === 0 || stage === 1 ? \"\" : <Plant stage={stage}/>}\n            </div>\n        );\n    }\n}\n\nexport default PlantTile;\n","import React, { Component } from 'react';\n\nimport PlantTile from './components/PlantTile.js';\n\nimport './css/App.css';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            count: 0\n        };\n    }\n\n    countUp() {\n        this.setState({\n            count: this.state.count + 1\n        })\n    }\n\n    render() {\n\n        var tileArray = new Array(36).fill(0, 0);\n\n        return (\n            <div className=\"App\">\n                {this.state.count >= 30 ?\n                    <div className=\"love-it-container\">\n                        <div className=\"love-it-move-box\">\n                            <div className=\"love-it\">I love it</div>\n                            <div className=\"love-it\">I love it</div>\n                        </div>\n                    </div>\n                    :\n                    \"\"}\n\n                <div className=\"hover-section\"/>\n\n                <div className=\"image-section\">\n                    {tileArray.map(tile => <PlantTile countUp={this.countUp.bind(this)}/>)}\n                </div>\n\n                <div className=\"hover-around\">\n                    hover around\n                </div>\n\n                {this.state.count >= 50 ?\n                    <div className=\"light-container\">\n                        <div className=\"light\"/>\n                        <div className=\"gradient-left\"/>\n                        <div className=\"gradient-right\"/>\n                    </div>\n                    :\n                    \"\"}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}